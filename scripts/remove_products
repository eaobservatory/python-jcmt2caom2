#!/usr/bin/env python2

# Copyright (C) 2015 East Asian Observatory
# All Rights Reserved.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc.,51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA

# Author: SF Graves

"""
remove_products: remove all planes with a specific productID from CAOM.

This will first execute a tap query to find all observations in the JCMT
archive that have planes with a  specific productID, and then it will
go through each observation and remove the requested plane from the CAOM record.

THIS IS VERY DANGEROUS AND COULD REMOVE IMPORTANT INFORMATION FROM THE JSA!

USE WITH CAUTION!

Usage:
    remove_products [-v | -q] --productID=<productID> [--dryrun] [--limit=<limit>]
    remove_products --help

Options:
    --help, -h     Show usage information

    --verbose, -v                Print debugging information.
    --quiet, -q                  Omit informational messages.

    --productID, -p <productID>  The name of the products to be removed from CAOM.

    --limit, -l <limit>          Only try to remove planes from this number of obs.

"""

import logging

from docopt import docopt

from tools4caom2.tapclient import tapclient
from jcmt2caom2.adjustments import remove_planes

script_name = 'remove_products'


logger = logging.getLogger(script_name)

def main():
    """
    Main routine for remove_products script.
    """

    args = docopt(__doc__)

    # Determine logging level from the --quiet and --verbose options.
    loglevel = logging.INFO
    if args['--verbose']:
        loglevel = logging.DEBUG
    elif args['--quiet']:
        loglevel = logging.WARNING


    if not args['--verbose']:
        # Don't pass on info messages from the requests package unless
        # verbose.
        logging.getLogger('requests').setLevel(logging.WARNING)
        # Also for caom2repoclient.
        logging.getLogger('caom2repoClient').setLevel(logging.WARNING)

    logging.basicConfig(level=loglevel)

    # Was dry run requested?
    if args['--dryrun']:
        dry_run = True
    else:
        dry_run = False

    # Check if a limit n the number of observations was requested.
    if args['--limit']:
        limit = int(args['--limit'])
        limquery = ' TOP ' + str(limit) + ' '
    else:
        limit = None
        limquery = ''

    # Get the productID.
    productID = args['--productID']

    # Find all (or number=LIMIT) observations in the JCMT collection
    # with the given productID.
    caom2query = '\n'.join([
        'SELECT ' + limquery + ' o.observationID ',
        'FROM caom2.Observation as o JOIN caom2.Plane as p ON o.obsid=p.obsid ',
        'WHERE o.collection=\'JCMT\' ',
        'AND p.productID=\'' + productID + '\'',
        ])

    tap = tapclient()
    results = tap.query(caom2query, timeout=60)
    obsids = results['observationID']

    # Remove the planes from that list of observations.
    remove_planes(productID, obsids, collection='JCMT', dry_run=dry_run)



if __name__ == '__main__':
    main()
